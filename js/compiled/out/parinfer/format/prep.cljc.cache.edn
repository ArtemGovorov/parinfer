;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name parinfer.format.prep, :imports nil, :requires {parinfer.format.reader parinfer.format.reader, parinfer.format.infer parinfer.format.infer, parinfer.format.string parinfer.format.string, clojure.string clojure.string}, :uses {whitespace? parinfer.format.reader, insert-string parinfer.format.string, join clojure.string, in-code? parinfer.format.reader, update-line parinfer.format.infer, valid-closer? parinfer.format.reader, update-insertion-pt parinfer.format.infer, remove-delim-trail parinfer.format.infer, process-char* parinfer.format.infer, update-delim-trail parinfer.format.infer, closing-delim? parinfer.format.reader, in-str? parinfer.format.reader, matching-delim parinfer.format.reader, get-lines parinfer.format.string}, :defs {initial-state {:name parinfer.format.prep/initial-state, :file "src/parinfer/format/prep.cljc", :line 20, :column 1, :end-line 20, :end-column 19, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 20, :column 6, :end-line 20, :end-column 19}, :doc "An initial state of our running state."}, process-text {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 142, :column 7, :end-line 142, :end-column 19, :arglists (quote ([text] [state text])), :doc "Update the state by processing the given text.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [state text]), :arglists ([text] [state text]), :arglists-meta (nil nil)}}, :name parinfer.format.prep/process-text, :variadic false, :file "src/parinfer/format/prep.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [state text]), :arglists ([text] [state text]), :arglists-meta (nil nil)}, :method-params ([text] [state text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists ([text] [state text]), :doc "Update the state by processing the given text."}, process-indent {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 81, :column 7, :end-line 81, :end-column 21, :arglists (quote ([{:keys [stack track-indent? lines line-no ch x-pos cursor-line cursor-x cursor-dx], :as state}])), :doc "Update the state by handling a possible indentation trigger."}, :name parinfer.format.prep/process-indent, :variadic false, :file "src/parinfer/format/prep.cljc", :end-column 21, :method-params ([p__47320]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [stack track-indent? lines line-no ch x-pos cursor-line cursor-x cursor-dx], :as state}])), :doc "Update the state by handling a possible indentation trigger."}, append-delim-trail {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 33, :column 7, :end-line 33, :end-column 25, :arglists (quote ([{:keys [stack line-no insert], :as state}]))}, :name parinfer.format.prep/append-delim-trail, :variadic false, :file "src/parinfer/format/prep.cljc", :end-column 25, :method-params ([p__47293]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [stack line-no insert], :as state}]))}, handle-cursor-delta {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 73, :column 7, :end-line 73, :end-column 26, :arglists (quote ([{:keys [indent-delta line-no x-pos cursor-line cursor-x cursor-dx], :as state}]))}, :name parinfer.format.prep/handle-cursor-delta, :variadic false, :file "src/parinfer/format/prep.cljc", :end-column 26, :method-params ([p__47313]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [indent-delta line-no x-pos cursor-line cursor-x cursor-dx], :as state}]))}, min-dedent {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 51, :column 7, :end-line 51, :end-column 17, :arglists (quote ([x {:keys [dedent-x]}]))}, :name parinfer.format.prep/min-dedent, :variadic false, :file "src/parinfer/format/prep.cljc", :end-column 17, :method-params ([x p__47303]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x {:keys [dedent-x]}]))}, correct-indent {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 57, :column 7, :end-line 57, :end-column 21, :arglists (quote ([{:keys [indent-delta x-pos stack dedent-x line-no], :as state}]))}, :name parinfer.format.prep/correct-indent, :variadic false, :file "src/parinfer/format/prep.cljc", :end-column 21, :method-params ([p__47308]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [indent-delta x-pos stack dedent-x line-no], :as state}]))}, reinsert-delims {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 109, :column 7, :end-line 109, :end-column 22, :arglists (quote ([{:keys [removed-delims], :as state}]))}, :name parinfer.format.prep/reinsert-delims, :variadic false, :file "src/parinfer/format/prep.cljc", :end-column 22, :method-params ([p__47334]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [removed-delims], :as state}]))}, min-indent {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 44, :column 7, :end-line 44, :end-column 17, :arglists (quote ([x {:keys [stack]}]))}, :name parinfer.format.prep/min-indent, :variadic false, :file "src/parinfer/format/prep.cljc", :end-column 17, :method-params ([x p__47298]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x {:keys [stack]}]))}, process-line {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 117, :column 7, :end-line 117, :end-column 19, :arglists (quote ([line] [{:keys [stack lines line-no cursor-line], :as state} line])), :doc "Update the state by processing the given line of text.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists-meta (nil nil)}}, :name parinfer.format.prep/process-line, :variadic false, :file "src/parinfer/format/prep.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists-meta (nil nil)}, :method-params ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :doc "Update the state by processing the given line of text."}, process-char {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 100, :column 7, :end-line 100, :end-column 19, :arglists (quote ([{:keys [lines line-no], :as state} ch])), :doc "Update the state by processing the given character and its position."}, :name parinfer.format.prep/process-char, :variadic false, :file "src/parinfer/format/prep.cljc", :end-column 19, :method-params ([p__47327 ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [lines line-no], :as state} ch])), :doc "Update the state by processing the given character and its position."}, format-text {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/format/prep.cljc", :line 155, :column 7, :end-line 155, :end-column 18, :arglists (quote ([text] [state text])), :doc "Format the given text by repositioning any trailing closing delimiters based on indentation.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [state text]), :arglists ([text] [state text]), :arglists-meta (nil nil)}}, :name parinfer.format.prep/format-text, :variadic false, :file "src/parinfer/format/prep.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [state text]), :arglists ([text] [state text]), :arglists-meta (nil nil)}, :method-params ([text] [state text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists ([text] [state text]), :doc "Format the given text by repositioning any trailing closing delimiters based on indentation."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:cursor-line :backup :insert :process? :x-pos :cursor-x :dedent-x :start :lines :ch :cursor-dx :track-indent? :line-no :stack :delim-trail :indent-delta :removed-delims :end :cursor-in-comment?}, :order [:backup :insert :dedent-x :lines :track-indent? :line-no :stack :delim-trail :indent-delta :x-pos :start :end :ch :cursor-line :cursor-x :cursor-dx :process? :removed-delims :cursor-in-comment?]}, :doc "Corrects indentation based on parens.\n  (used to preprocess existing files)"}