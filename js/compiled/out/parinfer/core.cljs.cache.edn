;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name parinfer.core, :imports nil, :requires {infer parinfer.format.infer, ajax.core ajax.core, vcr-data parinfer.vcr-data, parinfer.vcr-data parinfer.vcr-data, parinfer.format.infer parinfer.format.infer, toc parinfer.toc, parinfer.editor parinfer.editor, parinfer.vcr parinfer.vcr, string clojure.string, prep parinfer.format.prep, parinfer.state parinfer.state, clojure.string clojure.string, parinfer.format.prep parinfer.format.prep, parinfer.toc parinfer.toc}, :uses {create-regular-editor! parinfer.editor, render-controls! parinfer.vcr, vcr parinfer.vcr, play-recording! parinfer.vcr, state parinfer.state, start-editor-sync! parinfer.editor, stop-playing! parinfer.vcr, GET ajax.core, create-editor! parinfer.editor}, :defs {create-index-editors! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/core.cljs", :line 20, :column 7, :end-line 20, :end-column 28, :arglists (quote ([]))}, :name parinfer.core/create-index-editors!, :variadic false, :file "src/parinfer/core.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, animate-when-visible! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/core.cljs", :line 77, :column 7, :end-line 77, :end-column 28, :arglists (quote ([key-]))}, :name parinfer.core/animate-when-visible!, :variadic false, :file "src/parinfer/core.cljs", :end-column 28, :method-params ([key-]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key-]))}, index-anims {:name parinfer.core/index-anims, :file "src/parinfer/core.cljs", :line 83, :column 1, :end-line 83, :end-column 17, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/core.cljs", :line 83, :column 6, :end-line 83, :end-column 17}}, load-index-anims! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/core.cljs", :line 104, :column 7, :end-line 104, :end-column 24, :arglists (quote ([]))}, :name parinfer.core/load-index-anims!, :variadic false, :file "src/parinfer/core.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, render-index! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/core.cljs", :line 116, :column 7, :end-line 116, :end-column 20, :arglists (quote ([]))}, :name parinfer.core/render-index!, :variadic false, :file "src/parinfer/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, render-dev! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/core.cljs", :line 122, :column 7, :end-line 122, :end-column 18, :arglists (quote ([]))}, :name parinfer.core/render-dev!, :variadic false, :file "src/parinfer/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, init! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/core.cljs", :line 127, :column 7, :end-line 127, :end-column 12, :arglists (quote ([]))}, :name parinfer.core/init!, :variadic false, :file "src/parinfer/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:indent :not-displaced :displaced :watcher :wrap :splice :matchBrackets :paren-frac :mode :parinfer-mode :warn-good :string :indent-mode :paren-comment :indent-multi :enter :barf :prep :paren-tune :line :readOnly :comment :warn-bad :indent-far :slurp :paren-mode :paren-wrap}, :order [:indent :indent-far :indent-multi :line :comment :wrap :splice :barf :slurp :string :enter :readOnly :warn-good :warn-bad :displaced :not-displaced :parinfer-mode :prep :paren-tune :paren-frac :paren-comment :paren-wrap :matchBrackets :mode :watcher :indent-mode :paren-mode]}, :doc nil}