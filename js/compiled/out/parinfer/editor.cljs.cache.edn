;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name parinfer.editor, :imports nil, :requires {string clojure.string, clojure.string clojure.string, infer parinfer.format.infer, parinfer.format.infer parinfer.format.infer, prep parinfer.format.prep, parinfer.format.prep parinfer.format.prep, parinfer.state parinfer.state, parinfer.vcr parinfer.vcr}, :uses {parse-change parinfer.vcr, join clojure.string, vcr parinfer.vcr, empty-recording parinfer.vcr, play-recording! parinfer.vcr, state parinfer.state, controls-state parinfer.vcr, stop-playing! parinfer.vcr, parse-selections parinfer.vcr, empty-editor-state parinfer.state}, :defs {on-change {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 140, :column 7, :end-line 140, :end-column 16, :arglists (quote ([cm change])), :doc "Called after any change is applied to the editor."}, :name parinfer.editor/on-change, :variadic false, :file "src/parinfer/editor.cljs", :end-column 16, :method-params ([cm change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cm change])), :doc "Called after any change is applied to the editor."}, create-regular-editor! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 179, :column 7, :end-line 179, :end-column 29, :arglists (quote ([element-id] [element-id opts])), :doc "Create a non-parinfer editor.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([element-id] [element-id opts]), :arglists ([element-id] [element-id opts]), :arglists-meta (nil nil)}}, :name parinfer.editor/create-regular-editor!, :variadic false, :file "src/parinfer/editor.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([element-id] [element-id opts]), :arglists ([element-id] [element-id opts]), :arglists-meta (nil nil)}, :method-params ([element-id] [element-id opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 2, :fn-var true, :arglists ([element-id] [element-id opts]), :doc "Create a non-parinfer editor."}, set-frame-updated! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 21, :column 4, :end-line 21, :end-column 22, :protocol parinfer.editor/IEditor, :doc nil, :arglists (quote ([this value]))}, :protocol parinfer.editor/IEditor, :name parinfer.editor/set-frame-updated!, :variadic false, :file "src/parinfer/editor.cljs", :end-column 22, :method-params ([this value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this value])), :doc nil}, on-state-change {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 260, :column 7, :end-line 260, :end-column 22, :arglists (quote ([_ _ old-state new-state])), :doc "Called everytime the state changes to sync the code editor."}, :name parinfer.editor/on-state-change, :variadic false, :file "src/parinfer/editor.cljs", :end-column 22, :method-params ([_ _ old-state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 4, :fn-var true, :arglists (quote ([_ _ old-state new-state])), :doc "Called everytime the state changes to sync the code editor."}, frame-updated? {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 20, :column 4, :end-line 20, :end-column 18, :protocol parinfer.editor/IEditor, :doc nil, :arglists (quote ([this]))}, :protocol parinfer.editor/IEditor, :name parinfer.editor/frame-updated?, :variadic false, :file "src/parinfer/editor.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, fix-text! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 47, :column 7, :end-line 47, :end-column 16, :arglists (quote ([cm] [cm change])), :doc "Correctly format the text from the given editor.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([cm] [cm change]), :arglists ([cm] [cm change]), :arglists-meta (nil nil)}}, :name parinfer.editor/fix-text!, :variadic false, :file "src/parinfer/editor.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([cm] [cm change]), :arglists ([cm] [cm change]), :arglists-meta (nil nil)}, :method-params ([cm] [cm change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists ([cm] [cm change]), :doc "Correctly format the text from the given editor."}, record-change! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 22, :column 4, :end-line 22, :end-column 18, :protocol parinfer.editor/IEditor, :doc nil, :arglists (quote ([this thing]))}, :protocol parinfer.editor/IEditor, :name parinfer.editor/record-change!, :variadic false, :file "src/parinfer/editor.cljs", :end-column 18, :method-params ([this thing]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this thing])), :doc nil}, update-cursor! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 84, :column 7, :end-line 84, :end-column 21, :arglists (quote ([cm change])), :doc "Correctly position cursor after text that was just typed.\n  We need this since reformatting the text can shift things forward past our cursor."}, :name parinfer.editor/update-cursor!, :variadic false, :file "src/parinfer/editor.cljs", :end-column 21, :method-params ([cm change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cm change])), :doc "Correctly position cursor after text that was just typed.\n  We need this since reformatting the text can shift things forward past our cursor."}, editor-opts {:name parinfer.editor/editor-opts, :file "src/parinfer/editor.cljs", :line 171, :column 1, :end-line 171, :end-column 17, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 171, :column 6, :end-line 171, :end-column 17}}, compute-cursor-dx {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 28, :column 7, :end-line 28, :end-column 24, :arglists (quote ([cursor change]))}, :name parinfer.editor/compute-cursor-dx, :variadic false, :file "src/parinfer/editor.cljs", :end-column 24, :method-params ([cursor change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor change]))}, force-editor-sync! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 268, :column 7, :end-line 268, :end-column 25, :arglists (quote ([]))}, :name parinfer.editor/force-editor-sync!, :variadic false, :file "src/parinfer/editor.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, on-cursor-activity {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 149, :column 7, :end-line 149, :end-column 25, :arglists (quote ([cm])), :doc "Called after the cursor moves in the editor."}, :name parinfer.editor/on-cursor-activity, :variadic false, :file "src/parinfer/editor.cljs", :end-column 25, :method-params ([cm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cm])), :doc "Called after the cursor moves in the editor."}, start-editor-sync! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 272, :column 7, :end-line 272, :end-column 25, :arglists (quote ([]))}, :name parinfer.editor/start-editor-sync!, :variadic false, :file "src/parinfer/editor.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, IEditor {:meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 17, :column 14, :end-line 17, :end-column 21, :doc "Custom data/methods for a CodeMirror editor.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {cm-key [[this]], frame-updated? [[this]], set-frame-updated! [[this value]], record-change! [[this thing]]}}}, :protocol-symbol true, :name parinfer.editor/IEditor, :file "src/parinfer/editor.cljs", :end-column 21, :column 1, :line 17, :protocol-info {:methods {cm-key [[this]], frame-updated? [[this]], set-frame-updated! [[this value]], record-change! [[this thing]]}}, :info nil, :end-line 17, :impls #{parinfer.editor/x38128}, :doc "Custom data/methods for a CodeMirror editor.", :jsdoc ("@interface")}, before-change {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 131, :column 7, :end-line 131, :end-column 20, :arglists (quote ([cm change])), :doc "Called before any change is applied to the editor."}, :name parinfer.editor/before-change, :variadic false, :file "src/parinfer/editor.cljs", :end-column 20, :method-params ([cm change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cm change])), :doc "Called before any change is applied to the editor."}, on-tab {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 157, :column 7, :end-line 157, :end-column 13, :arglists (quote ([cm])), :doc "Indent selection or insert two spaces when tab is pressed.\n  from: https://github.com/codemirror/CodeMirror/issues/988#issuecomment-14921785"}, :name parinfer.editor/on-tab, :variadic false, :file "src/parinfer/editor.cljs", :end-column 13, :method-params ([cm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cm])), :doc "Indent selection or insert two spaces when tab is pressed.\n  from: https://github.com/codemirror/CodeMirror/issues/988#issuecomment-14921785"}, create-editor! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 190, :column 7, :end-line 190, :end-column 21, :arglists (quote ([element-id key-] [element-id key- opts])), :doc "Create a parinfer editor.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([element-id key-] [element-id key- opts]), :arglists ([element-id key-] [element-id key- opts]), :arglists-meta (nil nil)}}, :name parinfer.editor/create-editor!, :variadic false, :file "src/parinfer/editor.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([element-id key-] [element-id key- opts]), :arglists ([element-id key-] [element-id key- opts]), :arglists-meta (nil nil)}, :method-params ([element-id key-] [element-id key- opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 3, :fn-var true, :arglists ([element-id key-] [element-id key- opts]), :doc "Create a parinfer editor."}, cm-key {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 19, :column 4, :end-line 19, :end-column 10, :protocol parinfer.editor/IEditor, :doc nil, :arglists (quote ([this]))}, :protocol parinfer.editor/IEditor, :name parinfer.editor/cm-key, :variadic false, :file "src/parinfer/editor.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, frame-updates {:name parinfer.editor/frame-updates, :file "src/parinfer/editor.cljs", :line 129, :column 1, :end-line 129, :end-column 19, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/editor.cljs", :line 129, :column 6, :end-line 129, :end-column 19}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:frame-updated? :cursor-line :target-key :watcher :else :selections :matchBrackets :dt :Tab :cursor-x :mode :parinfer-mode :extraKeys :show? :cursor-dx :theme :cm :readOnly :recording? :changes :infer :change :last-time :editor-updater :text}, :order [:cursor-line :cursor-x :cursor-dx :mode :infer :text :else :change :selections :theme :matchBrackets :extraKeys :Tab :parinfer-mode :readOnly :show? :target-key :cm :watcher :frame-updated? :recording? :last-time :changes :dt :editor-updater]}, :doc "Glues Parinfer's formatter to a CodeMirror editor"}