;; Analyzed by ClojureScript 1.7.122
{:use-macros {html sablono.core, go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name parinfer.vcr, :imports nil, :requires {cljs.core.async cljs.core.async, om om.core, om.core om.core, sablono.core sablono.core, parinfer.state parinfer.state, cljs.pprint cljs.pprint, gdom goog.dom, goog.dom goog.dom}, :uses {timeout cljs.core.async, pprint cljs.pprint, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, state parinfer.state, alts! cljs.core.async}, :defs {parse-change {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([change]))}, :name parinfer.vcr/parse-change, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 19, :method-params ([change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([change]))}, controls-view {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 137, :column 7, :end-line 137, :end-column 20, :arglists (quote ([{:keys [target-key show?], :as data} owner]))}, :name parinfer.vcr/controls-view, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 20, :method-params ([p__38016 owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [target-key show?], :as data} owner]))}, render-controls! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 155, :column 7, :end-line 155, :end-column 23, :arglists (quote ([]))}, :name parinfer.vcr/render-controls!, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, vcr {:name parinfer.vcr/vcr, :file "src/parinfer/vcr.cljs", :line 15, :column 1, :end-line 15, :end-column 13, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 15, :column 10, :end-line 15, :end-column 13}}, parse-pos {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 28, :column 7, :end-line 28, :end-column 16, :arglists (quote ([pos]))}, :name parinfer.vcr/parse-pos, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 16, :method-params ([pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pos]))}, parse-selection {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 48, :column 7, :end-line 48, :end-column 22, :arglists (quote ([selection]))}, :name parinfer.vcr/parse-selection, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 22, :method-params ([selection]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selection]))}, done-recording! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 76, :column 7, :end-line 76, :end-column 22, :arglists (quote ([key-]))}, :name parinfer.vcr/done-recording!, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 22, :method-params ([key-]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key-]))}, SHOW_CONTROLS {:name parinfer.vcr/SHOW_CONTROLS, :file "src/parinfer/vcr.cljs", :line 131, :column 1, :end-line 131, :end-column 19, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 131, :column 6, :end-line 131, :end-column 19}}, t_parinfer$vcr38027 {:num-fields 8, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name parinfer.vcr/t_parinfer$vcr38027, :file "src/parinfer/vcr.cljs", :type true, :anonymous true, :column 3, :line 139, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, empty-recording {:name parinfer.vcr/empty-recording, :file "src/parinfer/vcr.cljs", :line 18, :column 1, :end-line 18, :end-column 21, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 18, :column 6, :end-line 18, :end-column 21}}, apply-selections {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 58, :column 7, :end-line 58, :end-column 23, :arglists (quote ([cm selections]))}, :name parinfer.vcr/apply-selections, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 23, :method-params ([cm selections]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cm selections]))}, play-recording! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 80, :column 7, :end-line 80, :end-column 22, :arglists (quote ([key-]))}, :name parinfer.vcr/play-recording!, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 22, :method-params ([key-]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key-]))}, ->t_parinfer$vcr38027 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([controls-view p__38016 owner map__38025 data target-key show? meta38028])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name parinfer.vcr/->t_parinfer$vcr38027, :variadic false, :file "src/parinfer/vcr.cljs", :method-params ([controls-view p__38016 owner map__38025 data target-key show? meta38028]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 139, :max-fixed-arity 8, :fn-var true, :arglists (quote ([controls-view p__38016 owner map__38025 data target-key show? meta38028])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, controls-state {:name parinfer.vcr/controls-state, :file "src/parinfer/vcr.cljs", :line 133, :column 1, :end-line 133, :end-column 24, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 133, :column 10, :end-line 133, :end-column 24}}, apply-change {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 40, :column 7, :end-line 40, :end-column 19, :arglists (quote ([cm {:keys [text from to origin]}]))}, :name parinfer.vcr/apply-change, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 19, :method-params ([cm p__37646]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cm {:keys [text from to origin]}]))}, stop-playing! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 114, :column 7, :end-line 114, :end-column 20, :arglists (quote ([key-]))}, :name parinfer.vcr/stop-playing!, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 20, :method-params ([key-]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key-]))}, parse-selections {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 54, :column 7, :end-line 54, :end-column 23, :arglists (quote ([selections]))}, :name parinfer.vcr/parse-selections, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 23, :method-params ([selections]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selections]))}, t_parinfer$vcr38019 {:num-fields 8, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name parinfer.vcr/t_parinfer$vcr38019, :file "src/parinfer/vcr.cljs", :type true, :anonymous true, :column 3, :line 139, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_parinfer$vcr38019 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([controls-view p__38016 owner map__38017 data target-key show? meta38020])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name parinfer.vcr/->t_parinfer$vcr38019, :variadic false, :file "src/parinfer/vcr.cljs", :method-params ([controls-view p__38016 owner map__38017 data target-key show? meta38020]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 139, :max-fixed-arity 8, :fn-var true, :arglists (quote ([controls-view p__38016 owner map__38017 data target-key show? meta38020])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, print-recording! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 119, :column 7, :end-line 119, :end-column 23, :arglists (quote ([key-])), :doc "Pretty print the data to the console, so we can paste it into vcr_data.cljs"}, :name parinfer.vcr/print-recording!, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 23, :method-params ([key-]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key-])), :doc "Pretty print the data to the console, so we can paste it into vcr_data.cljs"}, start-recording! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/src/parinfer/vcr.cljs", :line 66, :column 7, :end-line 66, :end-column 23, :arglists (quote ([key-]))}, :name parinfer.vcr/start-recording!, :variadic false, :file "src/parinfer/vcr.cljs", :end-column 23, :method-params ([key-]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key-]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.core, om.core om.core, sablono.core sablono.core, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:target-key :loop-delay owner controls-view data :else :selections :as :dt target-key :recur :timescale :ch :show? :cm :head p__38016 :keys :line :from :recording? :init-value map__38025 :loop? show? :changes map__38017 :origin :anchor meta38020 :target quote :change :arglists :last-time :text :stop-chan :to meta38028}, :order [:changes :init-value :last-time :recording? :line :ch :from :to :text :origin :anchor :head :cm :stop-chan :timescale :loop? :loop-delay :recur :change :selections :dt :else :show? :target-key controls-view :arglists quote :keys :as target-key show? data owner p__38016 map__38017 meta38020 map__38025 meta38028 :target]}, :doc "VCR - editor animation recording and playback"}