;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name parinfer-site.editor, :imports nil, :requires {clojure.string clojure.string, parinfer-site.state parinfer-site.state, parinfer-site.editor-support parinfer-site.editor-support, parinfer-site.vcr parinfer-site.vcr}, :uses {get-prev-state parinfer-site.editor-support, parse-change parinfer-site.vcr, set-frame-updated! parinfer-site.editor-support, join clojure.string, vcr parinfer-site.vcr, frame-updated? parinfer-site.editor-support, fix-text! parinfer-site.editor-support, record-change! parinfer-site.editor-support, update-cursor! parinfer-site.editor-support, empty-recording parinfer-site.vcr, play-recording! parinfer-site.vcr, state parinfer-site.state, controls-state parinfer-site.vcr, stop-playing! parinfer-site.vcr, parse-selections parinfer-site.vcr, empty-editor-state parinfer-site.state, IEditor parinfer-site.editor-support, cm-key parinfer-site.editor-support}, :defs {on-change {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/site/src/parinfer_site/editor.cljs", :line 45, :column 7, :end-line 45, :end-column 16, :arglists (quote ([cm change])), :doc "Called after any change is applied to the editor."}, :name parinfer-site.editor/on-change, :variadic false, :file "src/parinfer_site/editor.cljs", :end-column 16, :method-params ([cm change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cm change])), :doc "Called after any change is applied to the editor."}, create-regular-editor! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/site/src/parinfer_site/editor.cljs", :line 84, :column 7, :end-line 84, :end-column 29, :arglists (quote ([element-id] [element-id opts])), :doc "Create a non-parinfer editor.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([element-id] [element-id opts]), :arglists ([element-id] [element-id opts]), :arglists-meta (nil nil)}}, :name parinfer-site.editor/create-regular-editor!, :variadic false, :file "src/parinfer_site/editor.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([element-id] [element-id opts]), :arglists ([element-id] [element-id opts]), :arglists-meta (nil nil)}, :method-params ([element-id] [element-id opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists ([element-id] [element-id opts]), :doc "Create a non-parinfer editor."}, on-state-change {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/site/src/parinfer_site/editor.cljs", :line 167, :column 7, :end-line 167, :end-column 22, :arglists (quote ([_ _ old-state new-state])), :doc "Called everytime the state changes to sync the code editor."}, :name parinfer-site.editor/on-state-change, :variadic false, :file "src/parinfer_site/editor.cljs", :end-column 22, :method-params ([_ _ old-state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 4, :fn-var true, :arglists (quote ([_ _ old-state new-state])), :doc "Called everytime the state changes to sync the code editor."}, editor-opts {:name parinfer-site.editor/editor-opts, :file "src/parinfer_site/editor.cljs", :line 76, :column 1, :end-line 76, :end-column 17, :meta {:file "/Users/swilliam/code/parinfer/site/src/parinfer_site/editor.cljs", :line 76, :column 6, :end-line 76, :end-column 17}}, force-editor-sync! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/site/src/parinfer_site/editor.cljs", :line 175, :column 7, :end-line 175, :end-column 25, :arglists (quote ([]))}, :name parinfer-site.editor/force-editor-sync!, :variadic false, :file "src/parinfer_site/editor.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, on-cursor-activity {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/site/src/parinfer_site/editor.cljs", :line 54, :column 7, :end-line 54, :end-column 25, :arglists (quote ([cm])), :doc "Called after the cursor moves in the editor."}, :name parinfer-site.editor/on-cursor-activity, :variadic false, :file "src/parinfer_site/editor.cljs", :end-column 25, :method-params ([cm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cm])), :doc "Called after the cursor moves in the editor."}, start-editor-sync! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/site/src/parinfer_site/editor.cljs", :line 179, :column 7, :end-line 179, :end-column 25, :arglists (quote ([]))}, :name parinfer-site.editor/start-editor-sync!, :variadic false, :file "src/parinfer_site/editor.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, IEditor {:impls (parinfer-site.editor/x22417)}, before-change {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/site/src/parinfer_site/editor.cljs", :line 36, :column 7, :end-line 36, :end-column 20, :arglists (quote ([cm change])), :doc "Called before any change is applied to the editor."}, :name parinfer-site.editor/before-change, :variadic false, :file "src/parinfer_site/editor.cljs", :end-column 20, :method-params ([cm change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cm change])), :doc "Called before any change is applied to the editor."}, on-tab {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/site/src/parinfer_site/editor.cljs", :line 62, :column 7, :end-line 62, :end-column 13, :arglists (quote ([cm])), :doc "Indent selection or insert two spaces when tab is pressed.\n  from: https://github.com/codemirror/CodeMirror/issues/988#issuecomment-14921785"}, :name parinfer-site.editor/on-tab, :variadic false, :file "src/parinfer_site/editor.cljs", :end-column 13, :method-params ([cm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cm])), :doc "Indent selection or insert two spaces when tab is pressed.\n  from: https://github.com/codemirror/CodeMirror/issues/988#issuecomment-14921785"}, create-editor! {:protocol-inline nil, :meta {:file "/Users/swilliam/code/parinfer/site/src/parinfer_site/editor.cljs", :line 95, :column 7, :end-line 95, :end-column 21, :arglists (quote ([element-id key-] [element-id key- opts])), :doc "Create a parinfer editor.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([element-id key-] [element-id key- opts]), :arglists ([element-id key-] [element-id key- opts]), :arglists-meta (nil nil)}}, :name parinfer-site.editor/create-editor!, :variadic false, :file "src/parinfer_site/editor.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([element-id key-] [element-id key- opts]), :arglists ([element-id key-] [element-id key- opts]), :arglists-meta (nil nil)}, :method-params ([element-id key-] [element-id key- opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 3, :fn-var true, :arglists ([element-id key-] [element-id key- opts]), :doc "Create a parinfer editor."}, frame-updates {:name parinfer-site.editor/frame-updates, :file "src/parinfer_site/editor.cljs", :line 34, :column 1, :end-line 34, :end-column 19, :meta {:file "/Users/swilliam/code/parinfer/site/src/parinfer_site/editor.cljs", :line 34, :column 6, :end-line 34, :end-column 19}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:frame-updated? :target-key :watcher :selections :matchBrackets :dt :Tab :mode :parinfer-mode :extraKeys :show? :theme :cm :readOnly :recording? :changes :change :last-time :editor-updater :text}, :order [:change :selections :mode :theme :matchBrackets :extraKeys :Tab :parinfer-mode :readOnly :show? :target-key :cm :watcher :frame-updated? :recording? :last-time :changes :dt :text :editor-updater]}, :doc "Glues Parinfer's formatter to a CodeMirror editor"}